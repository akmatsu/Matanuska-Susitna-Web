name: Deploy CMS to EC2

on:
  push:
    branches:
      - main
    paths:
      - 'sites/cms/**'

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    concurrency:
      group: ci-${{github.ref}}
      cancel-in-progress: false
    name: Deploy
    runs-on: ubuntu-latest
    env:
      AWS_INSTANCE_SG_ID: ${{secrets.AWS_INSTANCE_SG_ID}}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{secrets.EC2_DEPLOY_ROLE_ARN}}
          role-session-name: github-actions-deploy-cms-session
          aws-region: us-west-2

      - name: Get runner IP address
        id: ip
        uses: haythem/public-ip@v1.3

      - name: Whitelist GitHub action IP address
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id $AWS_INSTANCE_SG_ID \
            --protocol tcp \
            --port 22 \
            --cidr ${{steps.ip.outputs.ipv4}}/32

      - name: Add SSH Key
        uses: kielabokkie/ssh-key-and-known-hosts-action@v1.4.1
        with:
          ssh-private-key: ${{secrets.EC2_SSH_PRIVATE_KEY}}
          ssh-host: ${{secrets.EC2_SERVER_HOST}}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Zip the required files
        run: |
          zip -r cms.zip . \
            -x node_modules/* \
            -x ".git/*" \
            -x "*.log" \
            -x ".env" \
            -x ".env.*" \
            -x ".env.*.local" \
            -x "sites/msb/*" \
            -x "packages/*"

      - name: Upload zipped repo to server
        run: |
          scp cms.zip ${{secrets.EC2_SERVER_USER}}@${{secrets.EC2_SERVER_HOST}}:/home/${{secrets.EC2_SERVER_USER}}/cms

      - name: SSH into the server and deploy
        run: |
          ssh ${{secrets.EC2_SERVER_USER}}@${{secrets.EC2_SERVER_HOST}} << 'EOF'
            set -e
            # Create temp and backup directory if they don't exist
            cd cms
            mkdir -p ./temp
            mkdir -p ./active

            # Unzip the files in the temp folder
            unzip -o ./cms.zip -d ./temp

            # Move the active folder to backup
            mv ./active ./backup
            
            # Move the temp folder to active
            mv ./temp ./active
            cd ./active

            # Setup Environment variables
            touch ./sites/cms/.env
            echo "DATABASE=${{secrets.DB_NAME}}" >> ./sites/cms/.env
            echo "DATABASE_USER=${{secrets.DB_USER}}" >> ./sites/cms/.env
            echo "DATABASE_HOST=${{secrets.DB_HOST}}" >> ./sites/cms/.env
            echo "DATABASE_PASSWORD=${{secrets.DB_PASSWORD}}" >> ./sites/cms/.env
            echo "DATABASE_PORT=5432" >> ./sites/cms/.env
            echo "DATABASE_PROVIDER=postgresql" >> ./sites/cms/.env
            echo "DATABASE_PROTOCOL=postgres" >> ./sites/cms/.env
            echo "WEB_PORT=3333" >> ./sites/cms/.env
            echo "ORIGIN_HOST=https://www.matsu.gov" >> ./sites/cms/.env
            echo "SESSION_SECRET=${{secrets.SESSION_SECRET}}" >> ./sites/cms/.env
            echo "AD_TENANT_ID=${{secrets.AD_TENANT_ID}}" >> ./sites/cms/.env
            echo "AD_CLIENT_ID=${{secrets.AD_CLIENT_ID}}" >> ./sites/cms/.env
            echo "AD_CLIENT_SECRET=${{secrets.AD_CLIENT_SECRET}}" >> ./sites/cms/.env
            echo "AD_REDIRECT_HOST=https://cms.matsu.gov" >> ./sites/cms/.env
            
            

            # Install repo dependencies
            npm ci --workspace=cms --include-workspace-root

            # Build the application for production
            npm run cms:build

            # Start the production server
            pm2 reload cms || pm2 start npm --name cms -- run cms:start
            
            # Remove temporary folders.
            rm -rf ../cms.zip
            rm -rf ../backup
          EOF
      - name: Remove GitHub actions IP from security group
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id $AWS_INSTANCE_SG_ID \
            --protocol tcp \
            --port 22 \
            --cidr ${{steps.ip.outputs.ipv4}}/32
