# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
  updatedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
  updatedAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Service {
  id: ID!
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  slug: String
  content: Service_content_Document
  processes(where: ProcessWhereInput! = {}, orderBy: [ProcessOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProcessWhereUniqueInput): [Process!]
  processesCount(where: ProcessWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

type Service_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ServiceWhereUniqueInput {
  id: ID
  slug: String
}

input ServiceWhereInput {
  AND: [ServiceWhereInput!]
  OR: [ServiceWhereInput!]
  NOT: [ServiceWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  publishAt: DateTimeNullableFilter
  unpublishAt: DateTimeNullableFilter
  slug: StringFilter
  processes: ProcessManyRelationFilter
  tags: TagManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ProcessManyRelationFilter {
  every: ProcessWhereInput
  some: ProcessWhereInput
  none: ProcessWhereInput
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input ServiceOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  publishAt: OrderDirection
  unpublishAt: OrderDirection
  slug: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ServiceUpdateInput {
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  slug: String
  content: JSON
  processes: ProcessRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ProcessRelateToManyForUpdateInput {
  disconnect: [ProcessWhereUniqueInput!]
  set: [ProcessWhereUniqueInput!]
  create: [ProcessCreateInput!]
  connect: [ProcessWhereUniqueInput!]
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input ServiceUpdateArgs {
  where: ServiceWhereUniqueInput!
  data: ServiceUpdateInput!
}

input ServiceCreateInput {
  title: String
  description: String
  publishAt: DateTime
  unpublishAt: DateTime
  slug: String
  content: JSON
  processes: ProcessRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ProcessRelateToManyForCreateInput {
  create: [ProcessCreateInput!]
  connect: [ProcessWhereUniqueInput!]
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type ExternalLink {
  id: ID!
  label: String
  url: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ExternalLinkWhereUniqueInput {
  id: ID
}

input ExternalLinkWhereInput {
  AND: [ExternalLinkWhereInput!]
  OR: [ExternalLinkWhereInput!]
  NOT: [ExternalLinkWhereInput!]
  id: IDFilter
  label: StringFilter
  url: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ExternalLinkOrderByInput {
  id: OrderDirection
  label: OrderDirection
  url: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ExternalLinkUpdateInput {
  label: String
  url: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ExternalLinkUpdateArgs {
  where: ExternalLinkWhereUniqueInput!
  data: ExternalLinkUpdateInput!
}

input ExternalLinkCreateInput {
  label: String
  url: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Tag {
  id: ID!
  name: String
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  services: ServiceManyRelationFilter
}

input ServiceManyRelationFilter {
  every: ServiceWhereInput
  some: ServiceWhereInput
  none: ServiceWhereInput
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  services: ServiceRelateToManyForUpdateInput
}

input ServiceRelateToManyForUpdateInput {
  disconnect: [ServiceWhereUniqueInput!]
  set: [ServiceWhereUniqueInput!]
  create: [ServiceCreateInput!]
  connect: [ServiceWhereUniqueInput!]
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  services: ServiceRelateToManyForCreateInput
}

input ServiceRelateToManyForCreateInput {
  create: [ServiceCreateInput!]
  connect: [ServiceWhereUniqueInput!]
}

type Alert {
  id: ID!
  title: String
  message: Alert_message_Document
  urgency: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type Alert_message_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input AlertWhereUniqueInput {
  id: ID
}

input AlertWhereInput {
  AND: [AlertWhereInput!]
  OR: [AlertWhereInput!]
  NOT: [AlertWhereInput!]
  id: IDFilter
  title: StringFilter
  urgency: IntFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input AlertOrderByInput {
  id: OrderDirection
  title: OrderDirection
  urgency: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input AlertUpdateInput {
  title: String
  message: JSON
  urgency: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input AlertUpdateArgs {
  where: AlertWhereUniqueInput!
  data: AlertUpdateInput!
}

input AlertCreateInput {
  title: String
  message: JSON
  urgency: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type Process {
  id: ID!
  name: String
  service: Service
  steps(where: StepWhereInput! = {}, orderBy: [StepOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StepWhereUniqueInput): [Step!]
  stepsCount(where: StepWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ProcessWhereUniqueInput {
  id: ID
}

input ProcessWhereInput {
  AND: [ProcessWhereInput!]
  OR: [ProcessWhereInput!]
  NOT: [ProcessWhereInput!]
  id: IDFilter
  name: StringFilter
  service: ServiceWhereInput
  steps: StepManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input StepManyRelationFilter {
  every: StepWhereInput
  some: StepWhereInput
  none: StepWhereInput
}

input ProcessOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ProcessUpdateInput {
  name: String
  service: ServiceRelateToOneForUpdateInput
  steps: StepRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ServiceRelateToOneForUpdateInput {
  create: ServiceCreateInput
  connect: ServiceWhereUniqueInput
  disconnect: Boolean
}

input StepRelateToManyForUpdateInput {
  disconnect: [StepWhereUniqueInput!]
  set: [StepWhereUniqueInput!]
  create: [StepCreateInput!]
  connect: [StepWhereUniqueInput!]
}

input ProcessUpdateArgs {
  where: ProcessWhereUniqueInput!
  data: ProcessUpdateInput!
}

input ProcessCreateInput {
  name: String
  service: ServiceRelateToOneForCreateInput
  steps: StepRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ServiceRelateToOneForCreateInput {
  create: ServiceCreateInput
  connect: ServiceWhereUniqueInput
}

input StepRelateToManyForCreateInput {
  create: [StepCreateInput!]
  connect: [StepWhereUniqueInput!]
}

type Step {
  id: ID!
  label: String
  process: Process
  content: Step_content_Document
  createdAt: DateTime
  updatedAt: DateTime
}

type Step_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input StepWhereUniqueInput {
  id: ID
}

input StepWhereInput {
  AND: [StepWhereInput!]
  OR: [StepWhereInput!]
  NOT: [StepWhereInput!]
  id: IDFilter
  label: StringFilter
  process: ProcessWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input StepOrderByInput {
  id: OrderDirection
  label: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input StepUpdateInput {
  label: String
  process: ProcessRelateToOneForUpdateInput
  content: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input ProcessRelateToOneForUpdateInput {
  create: ProcessCreateInput
  connect: ProcessWhereUniqueInput
  disconnect: Boolean
}

input StepUpdateArgs {
  where: StepWhereUniqueInput!
  data: StepUpdateInput!
}

input StepCreateInput {
  label: String
  process: ProcessRelateToOneForCreateInput
  content: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input ProcessRelateToOneForCreateInput {
  create: ProcessCreateInput
  connect: ProcessWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createService(data: ServiceCreateInput!): Service
  createServices(data: [ServiceCreateInput!]!): [Service]
  updateService(where: ServiceWhereUniqueInput!, data: ServiceUpdateInput!): Service
  updateServices(data: [ServiceUpdateArgs!]!): [Service]
  deleteService(where: ServiceWhereUniqueInput!): Service
  deleteServices(where: [ServiceWhereUniqueInput!]!): [Service]
  createExternalLink(data: ExternalLinkCreateInput!): ExternalLink
  createExternalLinks(data: [ExternalLinkCreateInput!]!): [ExternalLink]
  updateExternalLink(where: ExternalLinkWhereUniqueInput!, data: ExternalLinkUpdateInput!): ExternalLink
  updateExternalLinks(data: [ExternalLinkUpdateArgs!]!): [ExternalLink]
  deleteExternalLink(where: ExternalLinkWhereUniqueInput!): ExternalLink
  deleteExternalLinks(where: [ExternalLinkWhereUniqueInput!]!): [ExternalLink]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createAlert(data: AlertCreateInput!): Alert
  createAlerts(data: [AlertCreateInput!]!): [Alert]
  updateAlert(where: AlertWhereUniqueInput!, data: AlertUpdateInput!): Alert
  updateAlerts(data: [AlertUpdateArgs!]!): [Alert]
  deleteAlert(where: AlertWhereUniqueInput!): Alert
  deleteAlerts(where: [AlertWhereUniqueInput!]!): [Alert]
  createProcess(data: ProcessCreateInput!): Process
  createProcesses(data: [ProcessCreateInput!]!): [Process]
  updateProcess(where: ProcessWhereUniqueInput!, data: ProcessUpdateInput!): Process
  updateProcesses(data: [ProcessUpdateArgs!]!): [Process]
  deleteProcess(where: ProcessWhereUniqueInput!): Process
  deleteProcesses(where: [ProcessWhereUniqueInput!]!): [Process]
  createStep(data: StepCreateInput!): Step
  createSteps(data: [StepCreateInput!]!): [Step]
  updateStep(where: StepWhereUniqueInput!, data: StepUpdateInput!): Step
  updateSteps(data: [StepUpdateArgs!]!): [Step]
  deleteStep(where: StepWhereUniqueInput!): Step
  deleteSteps(where: [StepWhereUniqueInput!]!): [Step]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  service(where: ServiceWhereUniqueInput!): Service
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int! = 100, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  externalLink(where: ExternalLinkWhereUniqueInput!): ExternalLink
  externalLinks(where: ExternalLinkWhereInput! = {}, orderBy: [ExternalLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ExternalLinkWhereUniqueInput): [ExternalLink!]
  externalLinksCount(where: ExternalLinkWhereInput! = {}): Int
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  alert(where: AlertWhereUniqueInput!): Alert
  alerts(where: AlertWhereInput! = {}, orderBy: [AlertOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AlertWhereUniqueInput): [Alert!]
  alertsCount(where: AlertWhereInput! = {}): Int
  process(where: ProcessWhereUniqueInput!): Process
  processes(where: ProcessWhereInput! = {}, orderBy: [ProcessOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProcessWhereUniqueInput): [Process!]
  processesCount(where: ProcessWhereInput! = {}): Int
  step(where: StepWhereUniqueInput!): Step
  steps(where: StepWhereInput! = {}, orderBy: [StepOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StepWhereUniqueInput): [Step!]
  stepsCount(where: StepWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
